#ifndef _ALTERA_HPS_H_
#define _ALTERA_HPS_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'hps' in
 * file 'hps.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'mem_interface', class 'avl_mm_interface'
 * The macros are prefixed with 'MEM_INTERFACE_'.
 * The prefix is the slave descriptor.
 */
#define MEM_INTERFACE_COMPONENT_TYPE avl_mm_interface
#define MEM_INTERFACE_COMPONENT_NAME mem_interface
#define MEM_INTERFACE_BASE 0x0
#define MEM_INTERFACE_SPAN 134217728
#define MEM_INTERFACE_END 0x7ffffff

/*
 * Macros for device 'control_interface', class 'avl_mm_interface'
 * The macros are prefixed with 'CONTROL_INTERFACE_'.
 * The prefix is the slave descriptor.
 */
#define CONTROL_INTERFACE_COMPONENT_TYPE avl_mm_interface
#define CONTROL_INTERFACE_COMPONENT_NAME control_interface
#define CONTROL_INTERFACE_BASE 0x0
#define CONTROL_INTERFACE_SPAN 131072
#define CONTROL_INTERFACE_END 0x1ffff

/*
 * Macros for device 'spi_fpga', class 'altera_avalon_spi'
 * The macros are prefixed with 'SPI_FPGA_'.
 * The prefix is the slave descriptor.
 */
#define SPI_FPGA_COMPONENT_TYPE altera_avalon_spi
#define SPI_FPGA_COMPONENT_NAME spi_fpga
#define SPI_FPGA_BASE 0x20000
#define SPI_FPGA_SPAN 32
#define SPI_FPGA_END 0x2001f
#define SPI_FPGA_IRQ 1
#define SPI_FPGA_CLOCKMULT 1
#define SPI_FPGA_CLOCKPHASE 0
#define SPI_FPGA_CLOCKPOLARITY 0
#define SPI_FPGA_CLOCKUNITS "Hz"
#define SPI_FPGA_DATABITS 8
#define SPI_FPGA_DATAWIDTH 16
#define SPI_FPGA_DELAYMULT "1.0E-9"
#define SPI_FPGA_DELAYUNITS "ns"
#define SPI_FPGA_EXTRADELAY 0
#define SPI_FPGA_INSERT_SYNC 1
#define SPI_FPGA_ISMASTER 1
#define SPI_FPGA_LSBFIRST 0
#define SPI_FPGA_NUMSLAVES 32
#define SPI_FPGA_PREFIX "spi_"
#define SPI_FPGA_SYNC_REG_DEPTH 2
#define SPI_FPGA_TARGETCLOCK 128000
#define SPI_FPGA_TARGETSSDELAY "0.0"

/*
 * Macros for device 'output_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'OUTPUT_PIO_'.
 * The prefix is the slave descriptor.
 */
#define OUTPUT_PIO_COMPONENT_TYPE altera_avalon_pio
#define OUTPUT_PIO_COMPONENT_NAME output_pio
#define OUTPUT_PIO_BASE 0x20020
#define OUTPUT_PIO_SPAN 32
#define OUTPUT_PIO_END 0x2003f
#define OUTPUT_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define OUTPUT_PIO_BIT_MODIFYING_OUTPUT_REGISTER 1
#define OUTPUT_PIO_CAPTURE 0
#define OUTPUT_PIO_DATA_WIDTH 32
#define OUTPUT_PIO_DO_TEST_BENCH_WIRING 0
#define OUTPUT_PIO_DRIVEN_SIM_VALUE 0
#define OUTPUT_PIO_EDGE_TYPE NONE
#define OUTPUT_PIO_FREQ 78125000
#define OUTPUT_PIO_HAS_IN 0
#define OUTPUT_PIO_HAS_OUT 1
#define OUTPUT_PIO_HAS_TRI 0
#define OUTPUT_PIO_IRQ_TYPE NONE
#define OUTPUT_PIO_RESET_VALUE 0

/*
 * Macros for device 'input_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'INPUT_PIO_'.
 * The prefix is the slave descriptor.
 */
#define INPUT_PIO_COMPONENT_TYPE altera_avalon_pio
#define INPUT_PIO_COMPONENT_NAME input_pio
#define INPUT_PIO_BASE 0x20040
#define INPUT_PIO_SPAN 16
#define INPUT_PIO_END 0x2004f
#define INPUT_PIO_IRQ 0
#define INPUT_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define INPUT_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define INPUT_PIO_CAPTURE 1
#define INPUT_PIO_DATA_WIDTH 32
#define INPUT_PIO_DO_TEST_BENCH_WIRING 0
#define INPUT_PIO_DRIVEN_SIM_VALUE 0
#define INPUT_PIO_EDGE_TYPE RISING
#define INPUT_PIO_FREQ 78125000
#define INPUT_PIO_HAS_IN 1
#define INPUT_PIO_HAS_OUT 0
#define INPUT_PIO_HAS_TRI 0
#define INPUT_PIO_IRQ_TYPE EDGE
#define INPUT_PIO_RESET_VALUE 0

/*
 * Macros for device 'address_span_extender_cntl', class 'altera_address_span_extender'
 * The macros are prefixed with 'ADDRESS_SPAN_EXTENDER_CNTL_'.
 * The prefix is the slave descriptor.
 */
#define ADDRESS_SPAN_EXTENDER_CNTL_COMPONENT_TYPE altera_address_span_extender
#define ADDRESS_SPAN_EXTENDER_CNTL_COMPONENT_NAME address_span_extender
#define ADDRESS_SPAN_EXTENDER_CNTL_BASE 0x20050
#define ADDRESS_SPAN_EXTENDER_CNTL_SPAN 8
#define ADDRESS_SPAN_EXTENDER_CNTL_END 0x20057
#define ADDRESS_SPAN_EXTENDER_CNTL_BURSTCOUNT_WIDTH 1
#define ADDRESS_SPAN_EXTENDER_CNTL_BYTEENABLE_WIDTH 4
#define ADDRESS_SPAN_EXTENDER_CNTL_CNTL_ADDRESS_WIDTH 1
#define ADDRESS_SPAN_EXTENDER_CNTL_DATA_WIDTH 32
#define ADDRESS_SPAN_EXTENDER_CNTL_MASTER_ADDRESS_WIDTH 31
#define ADDRESS_SPAN_EXTENDER_CNTL_MAX_BURST_BYTES 4
#define ADDRESS_SPAN_EXTENDER_CNTL_MAX_BURST_WORDS 1
#define ADDRESS_SPAN_EXTENDER_CNTL_SLAVE_ADDRESS_SHIFT 2
#define ADDRESS_SPAN_EXTENDER_CNTL_SLAVE_ADDRESS_WIDTH 26
#define ADDRESS_SPAN_EXTENDER_CNTL_SUB_WINDOW_COUNT 1

/*
 * Macros for device 'remote_update', class 'altera_remote_update'
 * The macros are prefixed with 'REMOTE_UPDATE_'.
 * The prefix is the slave descriptor.
 */
#define REMOTE_UPDATE_COMPONENT_TYPE altera_remote_update
#define REMOTE_UPDATE_COMPONENT_NAME remote_update
#define REMOTE_UPDATE_BASE 0x20060
#define REMOTE_UPDATE_SPAN 32
#define REMOTE_UPDATE_END 0x2007f

/*
 * Macros for device 'epcql512_controller_avl_csr', class 'intel_generic_serial_flash_interface_top'
 * The macros are prefixed with 'EPCQL512_CONTROLLER_AVL_CSR_'.
 * The prefix is the slave descriptor.
 */
#define EPCQL512_CONTROLLER_AVL_CSR_COMPONENT_TYPE intel_generic_serial_flash_interface_top
#define EPCQL512_CONTROLLER_AVL_CSR_COMPONENT_NAME epcql512_controller
#define EPCQL512_CONTROLLER_AVL_CSR_BASE 0x20100
#define EPCQL512_CONTROLLER_AVL_CSR_SPAN 256
#define EPCQL512_CONTROLLER_AVL_CSR_END 0x201ff

/*
 * Macros for device 'epcql512_controller_avl_mem', class 'intel_generic_serial_flash_interface_top'
 * The macros are prefixed with 'EPCQL512_CONTROLLER_AVL_MEM_'.
 * The prefix is the slave descriptor.
 */
#define EPCQL512_CONTROLLER_AVL_MEM_COMPONENT_TYPE intel_generic_serial_flash_interface_top
#define EPCQL512_CONTROLLER_AVL_MEM_COMPONENT_NAME epcql512_controller
#define EPCQL512_CONTROLLER_AVL_MEM_BASE 0x8000000
#define EPCQL512_CONTROLLER_AVL_MEM_SPAN 67108864
#define EPCQL512_CONTROLLER_AVL_MEM_END 0xbffffff

/*
 * Macros for device 'address_span_extender_windowed_slave', class 'altera_address_span_extender'
 * The macros are prefixed with 'ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_'.
 * The prefix is the slave descriptor.
 */
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_COMPONENT_TYPE altera_address_span_extender
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_COMPONENT_NAME address_span_extender
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE 0x10000000
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_SPAN 268435456
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_END 0x1fffffff
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BURSTCOUNT_WIDTH 1
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BYTEENABLE_WIDTH 4
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_CNTL_ADDRESS_WIDTH 1
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_DATA_WIDTH 32
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_MASTER_ADDRESS_WIDTH 31
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_MAX_BURST_BYTES 4
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_MAX_BURST_WORDS 1
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_SLAVE_ADDRESS_SHIFT 2
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_SLAVE_ADDRESS_WIDTH 26
#define ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_SUB_WINDOW_COUNT 1


#endif /* _ALTERA_HPS_H_ */
